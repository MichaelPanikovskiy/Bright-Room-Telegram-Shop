import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error, accuracy_score
import numpy as np
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import matplotlib.pyplot as plt
import io

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data = pd.read_csv('data/sales_data.csv')

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
X_reg = data[['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü', '–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É']]
y_reg = data['–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å']

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
X_train_reg, X_test_reg, y_train_reg, y_test_reg = train_test_split(X_reg, y_reg, test_size=0.2, random_state=42)

# –û–±—É—á–µ–Ω–∏–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
reg_model = LinearRegression()
reg_model.fit(X_train_reg, y_train_reg)

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
label_encoder = LabelEncoder()
data['–¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏'] = label_encoder.fit_transform(data['–¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏'])

X_clf = data[['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü', '–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É', '–û—Ü–µ–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞']]
y_clf = data['–¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏']

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
X_train_clf, X_test_clf, y_train_clf, y_test_clf = train_test_split(X_clf, y_clf, test_size=0.2, random_state=42)

# –û–±—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º –±—É—Å—Ç–∏–Ω–≥–æ–º
clf_model = GradientBoostingClassifier(random_state=42)
clf_model.fit(X_train_clf, y_train_clf)

# –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –∏ –æ—Ü–µ–Ω–æ–∫
label_encoder_rating = LabelEncoder()
data['–û—Ü–µ–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞'] = label_encoder_rating.fit_transform(data['–û—Ü–µ–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞'])

X_rating = data[['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü', '–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É', '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å']]
y_rating = data['–û—Ü–µ–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞']

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤
X_train_rating, X_test_rating, y_train_rating, y_test_rating = train_test_split(X_rating, y_rating, test_size=0.2, random_state=42)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º –±—É—Å—Ç–∏–Ω–≥–æ–º
rating_model = GradientBoostingClassifier(random_state=42)
rating_model.fit(X_train_rating, y_train_rating)

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏
label_encoder_delivery = LabelEncoder()
data['–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è'] = label_encoder_delivery.fit_transform(data['–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è'])

X_delivery = data[['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü', '–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É', '–û—Ü–µ–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞']]
y_delivery = data['–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è']

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∏
X_train_delivery, X_test_delivery, y_train_delivery, y_test_delivery = train_test_split(X_delivery, y_delivery, test_size=0.2, random_state=42)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∏ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º –±—É—Å—Ç–∏–Ω–≥–æ–º
delivery_model = GradientBoostingClassifier(random_state=42)
delivery_model.fit(X_train_delivery, y_train_delivery)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '7600134141:AAH093R872jeekPiVP_R9xRmDnX3Z1Jo7dg'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
keyboard_markup = ReplyKeyboardMarkup(resize_keyboard=True)
buttons = ["–ü–æ–º–æ—â—å", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò"]
keyboard_markup.add(*buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò"
ai_keyboard_markup = ReplyKeyboardMarkup(resize_keyboard=True)
ai_buttons = ["–ü—Ä–æ–≥–Ω–æ–∑", "–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏–∫–∞—Ü–∏—è", "–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤", "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏", "–ù–∞–∑–∞–¥"]
ai_keyboard_markup.add(*ai_buttons)

@dp.message_handler(lambda message: message.text == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò")
async def use_ai(message: types.Message):
await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=ai_keyboard_markup)

@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard_markup)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
await message.reply("üí°–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BrightRoom - –º–∞–≥–∞–∑–∏–Ω –æ—Å–≤–µ—â–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –¢–µ–ª–µ–≥—Ä–∞–º! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:", reply_markup=keyboard_markup)

@dp.message_handler(lambda message: message.text == "–ü–æ–º–æ—â—å")
async def send_help(message: types.Message):
help_text = (
"–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö. –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n"
"–ü—Ä–æ–≥–Ω–æ–∑ - –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂\n"
"–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏–∫–∞—Ü–∏—è - –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –ø—Ä–æ–¥–∞–∂–∏\n"
"–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ - –ê–Ω–∞–ª–∏–∑ –æ—Ü–µ–Ω–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\n"
"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏ - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏\n"
)
await message.reply(help_text)

@dp.message_handler(lambda message: message.text == "–ü—Ä–æ–≥–Ω–æ–∑")
async def predict_sales(message: types.Message):
# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
example_data = np.array([[5, 2826.47]])
prediction = reg_model.predict(example_data)

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
fig, ax = plt.subplots()
ax.bar(['–ü—Ä–æ–≥–Ω–æ–∑'], prediction, color='skyblue')
ax.set_ylabel('–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å')
ax.set_title('–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å')

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä
buf = io.BytesIO()
plt.savefig(buf, format='png')
buf.seek(0)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
await bot.send_photo(chat_id=message.chat.id, photo=buf, caption=f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {prediction[0]:.2f}")
plt.close(fig)

@dp.message_handler(lambda message: message.text == "–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏–∫–∞—Ü–∏—è")
async def classify_sale(message: types.Message):
# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
example_data = np.array([[5, 2826.47, 1]])
prediction = clf_model.predict(example_data)
sale_type = label_encoder.inverse_transform(prediction)

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
fig, ax = plt.subplots()
ax.bar(['–¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏'], [1], color='lightgreen')
ax.set_xticklabels([sale_type[0]])
ax.set_title('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–¥–∞–∂–∏')

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä
buf = io.BytesIO()
plt.savefig(buf, format='png')
buf.seek(0)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
await bot.send_photo(chat_id=message.chat.id, photo=buf, caption=f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–¥–∞–∂–∏: {sale_type[0]}")
plt.close(fig)

@dp.message_handler(lambda message: message.text == "–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤")
async def analyze_reviews(message: types.Message):
# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤
example_data = np.array([[5, 2826.47, 14132.35]])
prediction = rating_model.predict(example_data)
rating = label_encoder_rating.inverse_transform(prediction)

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
fig, ax = plt.subplots()
ax.bar(['–û—Ü–µ–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞'], [1], color='lightcoral')
ax.set_xticklabels([str(rating[0])])
ax.set_title('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞')

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä
buf = io.BytesIO()
plt.savefig(buf, format='png')
buf.seek(0)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
await bot.send_photo(chat_id=message.chat.id, photo=buf, caption=f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞: {rating[0]}")
plt.close(fig)

@dp.message_handler(lambda message: message.text == "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏")
async def optimize_logistics(message: types.Message):
# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∏
example_data = np.array([[5, 2826.47, 1]])
prediction = delivery_model.predict(example_data)
delivery_method = label_encoder_delivery.inverse_transform(prediction)

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
fig, ax = plt.subplots()
ax.bar(['–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è'], [1], color='lightblue')
ax.set_xticklabels([delivery_method[0]])
ax.set_title('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è')

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä
buf = io.BytesIO()
plt.savefig(buf, format='png')
buf.seek(0)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
await bot.send_photo(chat_id=message.chat.id, photo=buf, caption=f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {delivery_method[0]}")
plt.close(fig)

if __name__ == '__main__':
executor.start_polling(dp, skip_updates=True)